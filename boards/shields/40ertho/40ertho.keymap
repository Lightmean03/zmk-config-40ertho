#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define LAYOUT_ortho_4x11( \
    k00, k01, k02, k03, k04, k05, k06, k07, k08, k09, k0a, \
    k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k1a, \
    k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k2a, \
    k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k3a \
) \
k00 k01 k02 k03 k04 k05 k06 k07 k08 k09 k0a \
k10 k11 k12 k13 k14 k15 k16 k17 k18 k19 k1a \
k20 k21 k22 k23 k24 k25 k26 k27 k28 k29 k2a \
k30 k31 k32 k33 k34 k35 k36 k37 k38 k39 k3a

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWERTY";
// -----------------------------------------------------------------------------------------
// | ESC |  Q  |  W  |  E  |  R  |  T  |  Y  |  U   |  I  |  O  | BKSP |
// | TAB |  A  |  S  |  D  |  F  |  G  |  H  |  J   |  K  |  L  | ENT  |
// | SHFT|  Z  |  X  |  C  |  V  |  B  |  N  |  M   |  ,  |  .  |  UP  |
// | CTRL| GUI | ALT |HYPER| LWR | SPC | SPC | RSE  | LFT | DWN | RGT  |
            bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp BSPC
   &kp TAB   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp RET
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp UP
   &kp LCTRL &kp LGUI &kp LALT &kp LC(LS(LA(LGUI))) &mo 1 &kp SPACE &kp SPACE &mo 2 &kp LEFT &kp DOWN &kp RIGHT
            >;
        };

        lower_layer {
            label = "LOWER";
// -----------------------------------------------------------------------------------------
// |  ~  |  !  |  @  |  #  |  $  |  %  |  ^  |  &  |  *  |  (  | DEL |
// | CAPS|  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |
// |     |  -  |  =  |  [  |  ]  |  \  |  `  |  '  |  "  | P/? | PGUP|
// |     |     |     |     |     |     |     |     | HOME| PGDN| END |
            bindings = <
   &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp DEL
   &kp CAPS  &kp N1   &kp N2 &kp N3   &kp N4   &kp N5      &kp N6    &kp N7    &kp N8    &kp N9 &kp N0
   &trans    &kp MINUS &kp EQUAL &kp LBKT &kp RBKT &kp BSLH   &kp GRAVE &kp APOS &kp DQT &kp FSLH &kp PG_UP
   &trans    &trans   &trans &trans   &trans   &trans      &trans    &trans    &kp HOME &kp PG_DN &kp END
            >;
        };

        raise_layer {
            label = "RAISE";
// -----------------------------------------------------------------------------------------
// | F1  | F2  | F3  | F4  | F5  | F6  | F7  | F8  | F9  | F10 | F11 |
// |     | PREV| PLAY| NEXT| VOL-| VOL+| MUTE|     |     |     | F12 |
// |     |     |     |     |     |     |     |     |  ;  |  :  |  )  |
// |     |     |     |     |     |     |     |     |     |     |     |
            bindings = <
   &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6   &kp F7 &kp F8 &kp F9 &kp F10 &kp F11
   &trans &kp C_PREV &kp C_PLAY_PAUSE &kp C_NEXT &kp C_VOL_DN &kp C_VOL_UP   &kp C_MUTE &trans &trans &trans &kp F12
   &trans &trans &trans &trans &trans &trans   &trans &trans &kp SEMI &kp COLON &kp RPAR
   &trans &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
            >;
        };

        adjust_layer {
            label = "ADJUST";
// -----------------------------------------------------------------------------------------
// |BOOTL| RST |     |     |     |     |     |     |     |     |     |
// | BT1 | BT2 | BT3 | BT4 | BT5 |     |     |     |     |     |     |
// |BTCLR|     |     |     |     |     |     |     |  |  |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |
            bindings = <
   &bootloader &sys_reset &trans &trans &trans &trans   &trans &trans &trans &trans &trans
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans   &trans &trans &trans &trans &trans
   &bt BT_CLR &trans &trans &trans &trans &trans   &trans &trans &kp PIPE &trans &trans
   &trans &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
